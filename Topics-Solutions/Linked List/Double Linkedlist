# Double Linked List

class Node:
    def __init__(self, data=None, prev=None, next=None):
        self.data = data
        self.prev = prev
        self.next = next


class DoublyLinkedList:
    def __init__(self):
        self.head = None

    def print_forward(self):
        if self.head is None:
            print("Doubly linked list is empty")
            return
        itr = self.head
        llstr = ''
        while itr:
            llstr += str(itr.data) + ' --> ' if itr.next else str(itr.data)
            itr = itr.next
        print("Forward:", llstr)

    def print_backward(self):
        if self.head is None:
            print("Doubly linked list is empty")
            return
        # Move itr to the last node
        itr = self.head
        while itr.next:
            itr = itr.next
        llstr = ''
        while itr:
            llstr += str(itr.data) + ' --> ' if itr.prev else str(itr.data)
            itr = itr.prev
        print("Backward:", llstr)

    def get_length(self):
        count = 0
        itr = self.head
        while itr:
            count += 1
            itr = itr.next
        return count

    def insert_at_beginning(self, data):
        if self.head is None:
            self.head = Node(data)
        else:
            node = Node(data, None, self.head)
            self.head.prev = node
            self.head = node

    def insert_at_end(self, data):
        if self.head is None:
            self.head = Node(data)
            return
        itr = self.head
        while itr.next:
            itr = itr.next
        itr.next = Node(data, itr)

    def insert_at(self, index, data):
        if index < 0 or index > self.get_length():
            raise Exception("Invalid Index")

        if index == 0:
            self.insert_at_beginning(data)
            return

        count = 0
        itr = self.head
        while itr:
            if count == index - 1:
                node = Node(data, itr, itr.next)
                if itr.next:
                    itr.next.prev = node
                itr.next = node
                break
            itr = itr.next
            count += 1

    def insert_after_value(self, data_after, data_to_insert):
        if self.head is None:
            return

        itr = self.head
        while itr:
            if itr.data == data_after:
                node = Node(data_to_insert, itr, itr.next)
                if itr.next:
                    itr.next.prev = node
                itr.next = node
                break
            itr = itr.next

    def remove_by_value(self, data):
        if self.head is None:
            return

        if self.head.data == data:
            self.head = self.head.next
            if self.head:
                self.head.prev = None
            return

        itr = self.head
        while itr:
            if itr.data == data:
                itr.prev.next = itr.next
                if itr.next:
                    itr.next.prev = itr.prev
                break
            itr = itr.next


if __name__ == '__main__':
    dll = DoublyLinkedList()

    data_list = input("Enter data elements for doubly linked list (comma separated): ").split(",")
    for data in data_list:
        dll.insert_at_end(data)

    dll.print_forward()
    dll.print_backward()

    data_after = input("Enter the data after which you want to insert: ")
    data_to_insert = input("Enter the data to insert: ")
    dll.insert_after_value(data_after, data_to_insert)
    dll.print_forward()
    dll.print_backward()

    data_to_remove = input("Enter the data to remove: ")
    dll.remove_by_value(data_to_remove)
    dll.print_forward()
    dll.print_backward()

