
[1, 2]
[3, 4]

axis = 0 

(3 + 1) / 2 = 2
(4 + 2) / 2 = 3


axis = 1

(1 + 2) / 2 = 1.5
(3 + 4) / 2 = 3.5


axis not mentioned

1 * 4 + 2 * 3 / 4 = 2.5

4 + 6 / 4 = 2.5

-------------------------------------------------------
Standard Deviation
------------------
sqrt(mean(x))

78, 67, 89, 93, 75 = 78 + 67 + 89 + 93 + 75 / 5 = 80.4

(78 - 80.4) ** 2, (67 - 80.4) ** 2, (89 - 80.4) ** 2, (93 - 80.4) ** 2, (75 - 80.4) ** 2


5.76 + 179.56 + 73.96 + 158.76 + 29.16 / 5 = 89.44 = sqrt(89.44) = 9.457272


[[2, 5, 9], 
 [3, 8, 11], 
 [4, 6, 7]]

2.76

2 + 5 + 9 / 3 = 5.3

(2 - 5.3) ** 2, (5 - 5.3) ** 2, (9 - 5.3) ** 2
0.7 + 0.09 + 13.69 / 3 = 2.19

3 + 8 + 11 / 3 = 22 / 3 = 7.3

(3 - 7.3) ** 2, (8 - 7.3) ** 2, (11- 7.3) ** 2

18.49 + 0.49 +  0.49

18.49+0.49 = 19.47
17.5681

7.3 + 18.49 + 17.56 / 9

----------------------------------

2, 3, 4 = 3

(2 - 3) ** 2,  (3 - 3) ** 2, (4 - 3) ** 2

1 + 0 + 1 / 3

sqrt(0.6) = 0.8


---------------------------------------------

[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]

[1, 2, 3, 4, 5]

n + 1 / 2
5 +1 / 2 = 6/ 2 = 3

25 per

n + 1 / 4
5 + 1 / 4
6 / 4 = 

75 per

n + 1 / 0.75
6 / 0.75


[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]

25 

10 / 4 = 2.5

percentile
------------------------------------------------------------------------------

String Functions
================

1. add()

2. multiply()

3. capitalize()

4. lower()

5. upper()

6. join()

7. equal()


Broadcasting
------------

Matrix Operation
-----------------

array()		- create a matrix

dot()		- perform matrix multiplication

transpose	- transpose the matrix

linalg.inv()	- calculates the inverse of a matrix

linalg.det()	- calculates the determinant of a matrix

flatten()	- transofrms a matrix into 1D array


 (5 * 9) - (6 * 8)
 45 - 48 = -3

-2(4 * 9) - (7 * 6)
   -2(36 - 42)
	12 

3(4 * 8 ) - (7 * 5)
3(32- 35)
3(-3) = -9

-3 +12 -9 = 1


Set Operations
--------------
1. union

2. intersection

Vectorization
--------------
arr = np.array(1,2,3, 4, 5)
res = arr + 10

Boolean Indexing
----------------


